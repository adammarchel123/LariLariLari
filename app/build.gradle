plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id "androidx.navigation.safeargs.kotlin"
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.example.runningappyt"
        minSdkVersion 29
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])


    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // Material Design
    // Material Design bisa kita gunakan pada Android Studio pada saat membuat aplikasi android agar desainnya menjadi modern dan menarik.
    // Dirilis pertama kali untuk OS Android Versi 5 yaitu Lollipop
    // Dengan menggunakan Material Design kita bisa membuat tampilan UI / UX (User Interface / User Experince) aplikasi android terlihat lebih nyata, bertekstur, modern, dan profesional.
    // Desain material adalah panduan komprehensif untuk desain visual, motion, dan interaksi di seluruh platform dan perangkat
    // mewujudkan visualisasi agar menyerupai bentuk nyata baik dalam teksture, bayangan dan pencahayaan.
    implementation 'com.google.android.material:material:1.3.0-alpha01'

    // Architectural Components
    // Architecture Components adalah kumpulan library yang dibuat untuk membantu developer Android dalam membangun aplikasi, sehingga aplikasi yang dibuat akan kokoh, mudah dites, dan mudah dipelihara
    // Architecture Componets Terdiri dari lifecycle, lifecycleOwner, lifecycleObserver, LiveData, ViewModel, dan Room
    // ViewModel digunakan untuk menyimpan data pada UI sehingga data tersebut tidak hilang saat configuration change terjadi
    // ViewModel menyimpan data terkait UI yang tidak dihapus saat rotasi aplikasi.
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"

    // Room
    // Room memberikan abstraction layer untuk SQLite database
    // Dengan Room, kita bisa membuat database dengan kode yang sedikit dan sederhana
    // Dan yang paling keren dari room adalah, room mengerti SQL
    // Jadi kita sudah memahami SQL, tidak akan sulit untuk menggunakan Room
    implementation "androidx.room:room-runtime:2.2.5"
    kapt "androidx.room:room-compiler:2.2.5"

    // Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:2.2.5"

    // Coroutines
    // Coroutine adalah pola desain serentak yang dapat Anda gunakan di Android untuk menyederhanakan kode yang dieksekusi secara asinkron
    // sehingga Anda dapat menulis kode aplikasi yang lebih rapi dan ringkas
    // coroutine berguna untuk mengelola tugas yang berjalan lama dan mungkin memblokir thread utama serta menyebabkan aplikasi tidak responsif
    // Dengan Coroutine Kotlin, Anda dapat menulis kode asinkron yang sederhana dan jelas
    // yang menjaga aplikasi tetap responsif saat mengelola tugas yang berjalan lama seperti panggilan jaringan atau operasi disk
    // Coroutines adalah cara untuk mengatasi masalah concurrency atau async programming
    // penjelasan simplenya mengubah pemanggilan async code menjadi seperti sync code
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.5'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.5'

    // Coroutine Lifecycle Scopes
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"

    // Navigation Components
    // Navigasi adalah interaksi yang memungkinkan pengguna melihat-lihat, masuk, dan keluar dari berbagai konten dalam aplikasi Anda
    // Navigation Component adalah sebuah library yang termasuk bagian dari Android Jetpack yang dibuat untuk mempermudah developer untuk membuat navigation antar Activity atau Fragment
    // Android Jetpack adalah library atau komponen yang dibuat oleh Google untuk mempermudah developing android app dengan memberikan komponen, rule dan arsitekturnya sendiri yang kesemuanya digabung dan tersimpan dalam library bernama “androidX”
    // android jetpack adalah semua dari itu (Tools, Dokumentasi, library)
    // arsitektur ini membantu kita dalam penerapan Single Activity
    // single activity merupakan sebuah konsep dimana kita hanya membuat satu buah activity di dalam aplikasi kita, kemudian semua tampilan UI akan di letak kan pada fragment fragment
    // Pada case sederhana kita berpindah daru satu fragment ke fragment lain menggunakan fragment transaction
    // namun dalam case yang lebih komplek kita akan kesulitan dalam menghadle backstack dari fragment fragment tersebuh
    // sehingga di ciptakan lah Navigation Component yang akan memudahkan kita dalam menanganan ini
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.0"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.0"

    // Glide
    // Glide adalah salah satu library Android yang berguna untuk menampilkan gambar dari internet/URL.
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'

    // Google Maps Location Services
    implementation 'com.google.android.gms:play-services-location:17.0.0'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'

    // Dagger Core
    // Dagger adalah suatu mekanise untuk menerapkan Dependency Injection tanpa membuat penulisan kode menjadi  berulang – ulang
    // atau dengan kata lain untuk menyederhanakan Dependency Injection
    // Fungsi dari Dependency Injection yaitu menginjeksi bagian-bagian tertentu dalam aplikasi sehingga dapat mempermudah mengatur flow sebuah program .
    // dependency injection adalah sebuah teknik dimana, kita bisa menyediakan sebuah objek yang ketergantungan terhadap objek lain
    implementation "com.google.dagger:dagger:2.28.1"
    kapt "com.google.dagger:dagger-compiler:2.25.2"

    // Dagger Android
    api 'com.google.dagger:dagger-android:2.28.1'
    api 'com.google.dagger:dagger-android-support:2.28.1'
    kapt 'com.google.dagger:dagger-android-processor:2.23.2'

    // Activity KTX for viewModels()
    implementation "androidx.activity:activity-ktx:1.1.0"

    //Dagger - Hilt
    // Hilt adalah library injeksi dependensi untuk Android yang mengurangi boilerplate ketika melakukan injeksi dependensi manual dalam project Anda
    // Hilt menyediakan container untuk setiap class Android dalam project Anda dan mengelola siklus prosesnya secara otomatis
    // tujuan Hilt adalah sebagai berikut:
    // Menyederhanakan infrastruktur yang berkaitan dengan Dagger untuk aplikasi Android
    // Membuat serangkaian komponen dan cakupan standar untuk memudahkan penyiapan, keterbacaan, dan berbagi kode antar-aplikasi.
    // Memberikan cara yang mudah dalam menyediakan binding yang berbeda untuk berbagai jenis build, seperti pengujian, debug, atau rilis.
    // menggunakan Dagger di aplikasi Android mengharuskan Anda untuk menulis sejumlah besar boilerplate
    // Hilt mengurangi kode boilerplate yang terlibat dalam penggunaan Dagger pada aplikasi Android
    // Jadi Hilt pada intinya difungsikan untuk membantu proses menambahkan D.I. di aplikasi kita
    // Ada proses otomatisasi di dalamnya agar kita tidak perlu melakukan D.I. secara manual.
    implementation "com.google.dagger:hilt-android:2.28-alpha"
    kapt "com.google.dagger:hilt-android-compiler:2.28-alpha"

    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha01"
    kapt "androidx.hilt:hilt-compiler:1.0.0-alpha01"

    // Easy Permissions
    // EasyPermissions is a wrapper library to simplify basic system permissions logic when targeting Android M or higher.
    implementation 'pub.devrel:easypermissions:3.0.0'

    // Timber
    // Better Logging In Android Using Timber
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // MPAndroidChart
    // library untuk membuat chart atau grafik pada Android
    // MPAndroidChart merupakan library yang dibangun oleh mas Philipp Jahoda aka Philjay beserta timnya
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    implementation 'android.arch.lifecycle:extensions:1.1.1'
}